" Run Pathogen
execute pathogen#infect()
execute pathogen#helptags()
" We use a vim, we do not care about old functionality
" prevents vim from emulating the original vi's bugs and limitations
set nocompatible    " enabled when (g)vimrc is found

if has("terminfo") 
        set t_Co=16 
	set t_AB=[%?%p1%{8}%<%t%p1%{40}%+%e%p1%{92}%+%;%dm 
	set t_AF=[%?%p1%{8}%<%t%p1%{30}%+%e%p1%{82}%+%;%dm 
else 
	set t_Co=16 
	set t_Sf=[3%dm 
	set t_Sb=[4%dm 
endif 

set backspace=start,indent,eol  " make backspace work like 'normal' text editors

set showmode    " show current mode (insert, visual, etc)

set number  " show line numbers
" set nonumber
set numberwidth=6

set showcmd " show the command being typed
set ruler   " always show current position
set wildmenu    " enhanced command-line completion
set laststatus=2    " always show status line


" set foldmethod=indent
" Automatically detect file types so that auto commands will work
filetype plugin indent on   " let vim detect filetype and load appropriate scripts
" Highlight the searchs
set hlsearch    " highlight search terms
set incsearch   " show search matches as they are found

" modeline - make sure we have modeline support
set modeline
set nolist
set nowrapscan

set ignorecase  " ignore case when searching
set smartcase   " case sensitive only when capital letter in expression

" Automatically indent based on the file type rules
set autoindent  " copy current indent level when starting new line
set smartindent " indent after braces, keywords, etc
set smarttab

" Tab settings
" In general shiftwidth and softtabstop should be the same value
" Tabs are 8 spaces, do not use tabs -- Mike Potts
set expandtab   " use spaces instead of tab characters
set tabstop=8   " width of a tab character in spaces
set softtabstop=4   " defines number of spaces for when adding/remving tabs
set shiftwidth=4    " number of spaces to use for autoindent

set showmatch   " show matching braces when text indicator is over them

syntax on
syntax enable   " enable syntax highlighting

let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1 

if has("gui")
    if has("gui_macvim")
        colorscheme liquidcarbon
        set guifont=MonteCarlo
    else
        " colorscheme desertink
        " colorscheme jellybeans
        " colorscheme desert
        " colorscheme solarized
        colorscheme koehler
        " set gfn=-schumacher-clean-medium-r-normal-*-*-130-*-*-c-*-iso646.1991-irv
        " set gfn=-adobe-courier-medium-r-normal-*-*-120-*-*-m-*-iso10646-1
        " set gfn=-dec-terminal-medium-r-normal-*-*-140-*-*-c-*-iso8859-1
        set gfn="Courier 10 Pitch 10"
        set guifont=MonteCarlo
    endif
else
    colorscheme osx_like
endif

" colorscheme vividchalk
" colorscheme xterm16
" colorscheme liquidcarbon
" colorscheme zenburn
" colorscheme darkblue
" colorscheme ir_black

" set gfn=-schumacher-clean-medium-r-normal-*-*-130-*-*-c-*-iso646.1991-irv
" set gfn=-adobe-courier-medium-r-normal-*-*-120-*-*-m-*-iso10646-1
" set gfn=-dec-terminal-medium-r-normal-*-*-140-*-*-c-*-iso8859-1
set gfn="Courier 10 Pitch 10"
set guifont=consolas:h8
"
" Colo(u)red or not colo(u)red
" If you want color you should set this to true
"
let color = "true"
"

"au BufRead,BufNewFile *.log set filetype=ess
" au Syntax ess source $VIM/../../Data/settings/esslog.vim
" au Syntax ess source /Users/edt/.vim/syntax/ess.vim

"
" Stuff for this project
" set makeef=/tmp/err.out
" set makeprg=/tmphome/edt/dev/rosetta/c3/doit
"
set efm=\|\|\ \"%f\"\,\ line\ %l:\ warning\ %m,\|\|\ \"%f\"\,\ line\ %l:\ error\ %m
let errorSearch = '\c\(\<error\|fail\w*\|fatal\|flagged\|\(de\)\@<!faults*\|not found\|not ok\|has not\|unknown\|disabled\|undervoltage\|overcurrent\|unusually\|threshold\|inactive\|\<bad\>\|time out\|is not\|not valid\|not allowed\|warning\|possible occurrence\|never\|incompatible\|might not\|without\|detected\|could not\|invalid\|already\|skippped\|declared\|mismatch\|address miss\|more data\|timeout\|repeated\|damaged\|Err\>\|fell below\|fifo full\|exceeds\|was not\|uncommanded\|4294967295\)'
let essSearch = '\C\(pppp\)\@!\(\S*f\s\|\S*f$\|\S*f\r\|fail\>\|failed\|FAIL\|fault\|error\S*\|Error\S*\|\<Err\>\|repeated\|damaged\|already\|mismatch\|disabled\|Disabled\|Loss\|Under\|bad packet\|Bad Packet\|time out\|timeout\|invalid\|skippped\|power cycle\|exceeds\|RS-422 Errors\|Framing\|Parity\|Time Out\|Uncommanded\|unusually\|4294967295|\<[pf][pf][pf][pf]\>\)'
let mushySearch = '\c\(could\|might\|tbd\|\<too\>\)'
let faultReformat = 's/\(\s*\S\+\),\s*\(\S\+\)U, \(\S\+\)U, \(".*"\), 0U, \(\S\+U\), 0LL, \(\S\+\) },/\1 => { word => \2 , bit => \3, msg => \4, threshold => "\5", maxrate => "\6" } ,/'

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

let g:notes_directories = ['R:/design/Notes']

command! -complete=file -nargs=1 Remove :echo 'Remove: '.'<f-args>'.' '.(delete(<f-args>) == 0 ? 'SUCCEEDED' : 'FAILED')

" ~/.vimrc ends here
